/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.audioselector;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;

import android.bluetooth.BluetoothManager;
import android.content.Context;
import android.media.AudioAttributes;
import android.media.AudioDeviceInfo;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioPlaybackConfiguration;
import android.os.Build;

import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

@Kroll.module(name = "Audioselector", id = "de.appwerft.audioselector")
public class AudioselectorModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "AudioselectorModule";
	private static final boolean DBG = TiConfig.LOGD;
	private AudioManager audioManager;

	@Kroll.constant
	public static final int TYPE_AUX_LINE = AudioDeviceInfo.TYPE_AUX_LINE;
	@Kroll.constant
	public static final int TYPE_BLUETOOTH_A2DP = AudioDeviceInfo.TYPE_BLUETOOTH_A2DP;
	@Kroll.constant
	public static final int TYPE_BLUETOOTH_SCO = AudioDeviceInfo.TYPE_BLUETOOTH_SCO;
	@Kroll.constant
	public static final int TYPE_BUILTIN_EARPIECE = AudioDeviceInfo.TYPE_BUILTIN_EARPIECE;
	@Kroll.constant
	public static final int TYPE_BUILTIN_SPEAKER = AudioDeviceInfo.TYPE_BUILTIN_SPEAKER;
	@Kroll.constant
	public static final int TYPE_WIRED_HEADSET = AudioDeviceInfo.TYPE_WIRED_HEADSET;
	@Kroll.constant
	public static final int TYPE_HDMI = AudioDeviceInfo.TYPE_HDMI;
	@Kroll.constant
	public static final int TYPE_WIRED_HEADPHONES = AudioDeviceInfo.TYPE_WIRED_HEADPHONES;
	@Kroll.constant
	public static final int CHANNEL_IN_STEREO = AudioFormat.CHANNEL_IN_STEREO;
	@Kroll.constant
	public static final int CHANNEL_IN_MONO = AudioFormat.CHANNEL_IN_MONO;
	@Kroll.constant
	public static final int CHANNEL_CONFIGURATION_DEFAULT = AudioFormat.CHANNEL_CONFIGURATION_DEFAULT;
	@Kroll.constant
	public static final int CHANNEL_CHANNEL_CONFIGURATION_INVALID = AudioFormat.CHANNEL_CONFIGURATION_INVALID;
	@Kroll.constant
	public static final int CONTENT_TYPE_MOVIE = AudioAttributes.CONTENT_TYPE_MOVIE;
	@Kroll.constant
	public static final int CONTENT_TYPE_MUSIC = AudioAttributes.CONTENT_TYPE_MUSIC;
	@Kroll.constant
	public static final int CONTENT_TYPE_SONIFICATION = AudioAttributes.CONTENT_TYPE_SONIFICATION;
	@Kroll.constant
	public static final int CONTENT_TYPE_SPEECH = AudioAttributes.CONTENT_TYPE_SPEECH;
	@Kroll.constant
	public static final int CONTENT_TYPE_UNKNOWN = AudioAttributes.CONTENT_TYPE_UNKNOWN;
	@Kroll.constant
	public static final int USAGE_ASSISTANCE_ACCESSIBILITY = AudioAttributes.USAGE_ASSISTANCE_ACCESSIBILITY;
	@Kroll.constant
	public static final int USAGE_ASSISTANCE_NAVIGATION_GUIDANCE = AudioAttributes.USAGE_ASSISTANCE_NAVIGATION_GUIDANCE;
	@Kroll.constant
	public static final int USAGE_ASSISTANCE_SONIFICATION = AudioAttributes.USAGE_ASSISTANCE_SONIFICATION;
	@Kroll.constant
	public static final int USAGE_ASSISTANCE = AudioAttributes.USAGE_ASSISTANT;
	@Kroll.constant
	public static final int USAGE_GAME = AudioAttributes.USAGE_GAME;
	@Kroll.constant
	public static final int USAGE_MEDIA = AudioAttributes.USAGE_MEDIA;
	@Kroll.constant
	public static final int USAGE_NOTIFICATION = AudioAttributes.USAGE_NOTIFICATION;
	@Kroll.constant
	public static final int USAGE_NOTIFICATION_COMMUNICATION_DELAYED = AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_DELAYED;
	@Kroll.constant
	public static final int USAGE_NOTIFICATION_INSTANT = AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_INSTANT;
	@Kroll.constant
	public static final int USAGE_NOTIFICATION_COMMUNICATION_REQUEST = AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_REQUEST;

	@Kroll.constant
	public static final String RINGER_MODE_CHANGED_ACTION = AudioManager.RINGER_MODE_CHANGED_ACTION;
	@Kroll.constant
	public static final int RINGER_MODE_NORMAL = AudioManager.RINGER_MODE_NORMAL;
	@Kroll.constant
	public static final int RINGER_MODE_SILENT = AudioManager.RINGER_MODE_SILENT;
	@Kroll.constant
	public static final int RINGER_MODE_VIBRATE = AudioManager.RINGER_MODE_VIBRATE;
	
	
	public AudioselectorModule() {
		super();
		audioManager = (AudioManager) TiApplication.getInstance().getApplicationContext()
				.getSystemService(Context.AUDIO_SERVICE);
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public void setRingerMode(int tone) {
		audioManager.setRingerMode(tone);
	}
	
	@Kroll.method
	public Object[] getDevices() {
		@SuppressWarnings("rawtypes")
		ArrayList<HashMap> deviceList = new ArrayList<HashMap>();
		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M)
			return null;
		AudioDeviceInfo[] infos = audioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS);
		for (AudioDeviceInfo info : infos) {
			HashMap<String, Object> opt = new HashMap<String, Object>();
			opt.put("channelcounts", info.getChannelCounts());
			opt.put("id", info.getId());
			// info.getAddress();
			opt.put("productname", info.getProductName());
			opt.put("type", info.getType());
			opt.put("samplerates", info.getSampleRates());
			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P)
				opt.put("address", info.getAddress());
			opt.put("channelmasks", info.getChannelMasks());
			opt.put("channelindexmasks", info.getChannelIndexMasks());
			opt.put("encodings", info.getEncodings());
			opt.put("hashcode", info.hashCode());
			deviceList.add(opt);
		}
		return deviceList.toArray();
	}

	@Kroll.method
	public Object[] getActivePlaybackConfigurations() {
		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O)
			return null;
		ArrayList<HashMap> configurationList = new ArrayList<HashMap>();
		final List<AudioPlaybackConfiguration> configurations = audioManager.getActivePlaybackConfigurations();
		for (AudioPlaybackConfiguration configuration : configurations) {
			HashMap<String, Object> opt = new HashMap<String, Object>();
			opt.put("describecontents",configuration.describeContents());
			// audioattributes
			HashMap<String, Object> audioattributes = new HashMap<String, Object>();
			AudioAttributes aa = configuration.getAudioAttributes();
			audioattributes.put("describecontents", aa.describeContents());
			audioattributes.put("contenttype", aa.getContentType());
			audioattributes.put("flags", aa.getFlags());
			audioattributes.put("usage", aa.getUsage());
			audioattributes.put("volumecontrolstream", aa.getVolumeControlStream());
			opt.put("audioattributes",audioattributes);
			
			configurationList.add(opt);
		}
		
		return configurationList.toArray();

	}

	@Kroll.method
	public boolean isSpeakerphoneOn() {
		return audioManager.isSpeakerphoneOn();
	}

	@Kroll.method
	public boolean isBluetoothScoOn() {
		return audioManager.isBluetoothScoOn();
	}

	@Kroll.method
	public boolean isBluetoothA2dpOn() {
		return audioManager.isBluetoothA2dpOn();
	}

	@Kroll.method
	public boolean isWiredHeadsetOn() {
		return audioManager.isWiredHeadsetOn();
	}

	// https://stackoverflow.com/questions/47057889/how-to-switch-audio-output-from-phone-phone-speaker-earphones-or-bluetooth-dev
	@SuppressWarnings("deprecation")
	private static void reset(AudioManager audioManager) {
		if (audioManager != null) {
			audioManager.setMode(AudioManager.MODE_NORMAL);
			audioManager.stopBluetoothSco();
			audioManager.setBluetoothScoOn(false);
			audioManager.setSpeakerphoneOn(false);
			audioManager.setWiredHeadsetOn(false);
		}
	}

	public static void connectEarpiece(AudioManager audioManager) {
		reset(audioManager);
		audioManager.setMode(AudioManager.MODE_IN_COMMUNICATION);
	}

	public static void connectSpeaker(AudioManager audioManager) {
		reset(audioManager);
		audioManager.setSpeakerphoneOn(true);
	}

	public static void connectHeadphones(AudioManager audioManager) {
		reset(audioManager);
		audioManager.setWiredHeadsetOn(true);
	}

	public static void connectBluetooth(AudioManager audioManager) {
		reset(audioManager);
	}

}
